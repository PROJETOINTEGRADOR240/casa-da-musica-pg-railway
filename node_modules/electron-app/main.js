

'use strict';

const electron = require('electron');
var  updater = require('eca-updater');
var eu = require('electron-updater');

// Module to control application life.
const app = electron.app;
// Module to create native browser window.
const BrowserWindow = electron.BrowserWindow;

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
let mainWindow;

function createWindow() {

    eu.on('ready',function(){  
      updater.run(function(){
            mainWindow.loadURL('file://' + __dirname + '/node_modules/eca-updater/index.html');
            // Open the DevTools.
            mainWindow.webContents.openDevTools();
            mainWindow.show();           
       });  

      // Create the browser window.
      mainWindow = new BrowserWindow({width: 800, height: 600,show:false});       
      // Emitted when the window is closed.
      mainWindow.on('closed', function() {
      // Dereference the window object, usually you would store windows
      // in an array if your app supports multi windows, this is the time
      // when you should delete the corresponding element.
      mainWindow = null;
    });

 });

  eu.on('updateRequired',function(){
    app.quit();
  });

  eu.on('updateAvailable',function(){
      mainWindow.webContents.send('update-available');
  });

  eu.on('error', function (err) {
      console.log("Error:"+ err);
  });

  eu.start();
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
app.on('ready', createWindow);

// Quit when all windows are closed.
app.on('window-all-closed', function () {
  // On OS X it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', function () {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (mainWindow === null) {
    createWindow();
  }
});
